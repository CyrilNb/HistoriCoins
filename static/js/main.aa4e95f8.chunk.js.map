{"version":3,"sources":["Today/Today.js","History/History.js","App.js","serviceWorker.js","index.js"],"names":["Today","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","btcpriceUSD","btcpriceEUR","icxpriceUSD","icxpriceEUR","nanopriceUSD","nanopriceEUR","_this2","pusher","Pusher","cluster","encrypted","prices","subscribe","axios","get","then","response","setState","data","BTC","USD","localStorage","setItem","EUR","ICX","NANO","catch","error","console","log","react_default","a","createElement","className","_this3","navigator","onLine","getItem","interval","setInterval","sendPricePusher","bind","price","post","clearInterval","Component","History","todayprice","oneyearprice","getBTCPrices","assertThisInitialized","getICXPrices","getNANOPrices","getXRBPrices","date","today","moment","unix","all","spread","icx","btc","nano","f","format","JSON","stringify","subtract","xrb","XRB","getTodayPrice","getOneYearPrice","parse","valueOfNano","App","href","target","rel","src_Today_Today","src_History_History","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa4e95f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Today.css'\nimport axios from 'axios'\nimport Pusher from 'pusher-js'\n\nclass Today extends Component{\n    // Adds a class constructor that assigns the initial state values:\n    constructor (){\n        super();\n        this.state = {\n            btcpriceUSD: '',\n            btcpriceEUR: '',\n            icxpriceUSD: '',\n            icxpriceEUR: '',\n            nanopriceUSD: '',\n            nanopriceEUR: '',\n        };\n    }\n\n    //This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount() {\n       // establish a connection to Pusher\n       //PUSHER DOESNT WORK I DONT KNOW WHY UI IS NOT UPDATE REAL TIME\n       this.pusher = new Pusher('35c3a9f0ce12cb308b8f', {\n            cluster: 'eu',\n            encrypted: true\n        });\n        // Subscribe to the 'coin-prices' channel\n        this.prices = this.pusher.subscribe('coin-prices');\n\n        axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ICX,NANO&tsyms=USD,EUR')\n            .then(response => {\n                //We set the latest price provided by CryptoCompare.\n                this.setState({btcpriceUSD: response.data.BTC.USD});\n                localStorage.setItem('BTCEUR', response.data.BTC.EUR);\n                this.setState({btcpriceEUR: response.data.BTC.EUR});\n                localStorage.setItem('BTCUSD', response.data.BTC.USD);\n                this.setState({icxpriceUSD: response.data.ICX.USD})\n                localStorage.setItem('ICXEUR', response.data.ICX.EUR);;\n                this.setState({icxpriceEUR: response.data.ICX.EUR})\n                localStorage.setItem('ICXUSD', response.data.ICX.USD);;\n                this.setState({nanopriceUSD: response.data.NANO.USD});\n                localStorage.setItem('NANOEUR', response.data.NANO.EUR);\n                this.setState({nanopriceEUR: response.data.NANO.EUR});\n                localStorage.setItem('NANOUSD', response.data.NANO.USD);\n            })\n            //catching any error here\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n     // The render method contains the JSX code which will be compiled to HTML.\n     render() {\n        return (\n            <div className=\"today--section container\">\n                <h2>Current Price</h2>\n                <div className=\"columns today--section__box\">\n                    <div className=\"column btc--section\">\n                        <h5>{this.state.btcpriceEUR} €</h5>\n                        <h6>${this.state.btcpriceUSD}</h6>\n                        <br></br>\n                        <p>1 BTC</p>\n                    </div>\n                    <div className=\"column icx--section\">\n                        <h5>{this.state.icxpriceEUR} €</h5>\n                        <h6>${this.state.icxpriceUSD}</h6>\n                        <br></br>\n                        <p>1 ICX</p>\n                    </div>\n                    <div className=\"column nano--section\">\n                        <h5>{this.state.nanopriceEUR} €</h5>\n                        <h6>${this.state.nanopriceUSD}</h6>\n                        <br></br>\n                        <p>1 NANO</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ btcpriceUSD: localStorage.getItem('BTCUSD') });\n            this.setState({ btcpriceEUR: localStorage.getItem('BTCEUR') });\n            this.setState({ icxpriceEUR: localStorage.getItem('ICXEUR') });\n            this.setState({ icxpriceUSD: localStorage.getItem('ICXUSD') });\n            this.setState({ nanopriceEUR: localStorage.getItem('NANOEUR') });\n            this.setState({ nanopriceUSD: localStorage.getItem('NANOUSD') });\n        }\n        console.log('component did mount')\n        this.interval = setInterval(() => {\n            axios.get('https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ICX,NANO&tsyms=USD,EUR')\n                .then(response => {\n                    this.sendPricePusher(response.data)\n                    console.log(response.data)\n                    this.setState({btcpriceEUR: response.data.BTC.EUR});\n                    this.setState({icxpriceEUR: response.data.ICX.EUR});\n                    this.setState({nanopriceEUR: response.data.NANO.EUR});\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n        }, 10000) //query the API every 10 secs and sends the data to Pusher\n        console.log('dfdsf');\n        // We bind to the 'prices' event and use the data in it (price information) to update the state values, thus, realtime changes \n        this.prices.bind('prices', price => {\n            this.setState({ btcpriceEUR: price.prices.BTC.EUR });\n            this.setState({ icxpriceEUR: price.prices.ICX.EUR});\n            this.setState({ nanopriceEUR: price.prices.NANO.EUR });\n        }, this);\n\n     }\n\n    sendPricePusher (data) {\n        axios.post('/prices/new', {\n            prices: data\n        })\n          .then(response => {\n              console.log(response)\n          })\n          .catch(error => {\n              console.log(error)\n          })\n     }\n\n     componentWillUnmount() {\n        clearInterval(this.interval);\n      }\n\n}\n\n\nexport default Today;","import React, { Component } from 'react';\n    import './History.css'\n    import axios from 'axios'\n    import moment from 'moment'\n\n    class History extends Component {\n        constructor(){\n            super();\n            this.state = {\n                todayprice: {},\n                oneyearprice: {}\n            }\n            this.getBTCPrices = this.getBTCPrices.bind(this);\n            this.getICXPrices = this.getICXPrices.bind(this);\n            this.getNANOPrices = this.getNANOPrices.bind(this);\n            this.getXRBPrices = this.getXRBPrices.bind(this);\n        }\n\n \n    // This function gets the BTC price for a specific timestamp/date. The date is passed in as an argument\n    getBTCPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=BTC&tsyms=EUR&ts=' + date);\n    }\n\n    // This function gets the ICX price for a specific timestamp/date. The date is passed in as an argument\n    getICXPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=ICX&tsyms=EUR&ts=' + date);\n    }\n\n\n    // This function gets the NANO price for a specific timestamp/date. The date is passed in as an argument\n    getNANOPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=NANO&tsyms=EUR&ts=' + date);\n    }\n\n    // This function gets the XRB (old NANO) price for a specific timestamp/date. The date is passed in as an argument\n    getXRBPrices (date) {\n        return axios.get('https://min-api.cryptocompare.com/data/pricehistorical?fsym=XRB&tsyms=EUR&ts=' + date);\n    }\n\n    // This function gets the prices for the current date.\n    getTodayPrice () {\n        // Get today's date in timestamp\n        let today = moment().unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getICXPrices(today), this.getBTCPrices(today), this.getNANOPrices(today)])\n            .then(axios.spread((icx, btc, nano) => {\n                let f = {\n                    date: moment.unix(today).format(\"MMMM Do YYYY\"),\n                    icx: icx.data.ICX.EUR,\n                    btc: btc.data.BTC.EUR,\n                    nano: nano.data.NANO.EUR,\n                }\n                // Set the state of todayprice to the content of the object f\n                localStorage.setItem('todayprice',JSON.stringify(f));\n                this.setState({ todayprice: f });\n            }));\n    }\n\n     // This function gets the prices for one year ago.\n     getOneYearPrice () {\n        // Get the date of year ago in timestamp\n        let date = moment().subtract(365,'days').unix();\n        // axios.all is used to make concurrent API requests. These requests were the functions we first created and they accept an argument of the date required.\n        axios.all([this.getICXPrices(date), this.getBTCPrices(date), this.getNANOPrices(date), this.getXRBPrices(date)])\n            .then(axios.spread((icx, btc, nano, xrb) => {\n                let f = {\n                    date: moment.unix(date).format(\"MMMM Do YYYY\"),\n                    icx: icx.data.ICX.EUR,\n                    btc: btc.data.BTC.EUR,\n                    nano: nano.data.NANO.EUR,\n                    xrb: xrb.data.XRB.EUR\n                }\n                // Set the state of one year ago to the content of the object f\n                this.setState({ oneyearprice: f });\n                localStorage.setItem('oneyearprice',JSON.stringify(f));\n            }));\n    }\n\n    // This is called when an instance of a component is being created and inserted into the DOM.\n    componentWillMount() {\n        this.getTodayPrice();\n        this.getOneYearPrice();\n    }\n\n    componentDidMount () {\n        if (!navigator.onLine) {\n            this.setState({ todayprice: JSON.parse(localStorage.getItem('todayprice')) });\n            this.setState({ oneyearprice: JSON.parse(localStorage.getItem('oneyearprice')) });\n        }\n    }\n\n    render() {\n        //cause NANO was previously named 'XRB' less than one year ago we have to display XRB price instead, depending of the date.\n        let valueOfNano; \n        if(this.state.oneyearprice.nano === 0){\n            valueOfNano = this.state.oneyearprice.xrb;\n        }else{\n            valueOfNano = this.state.oneyearprice.nano;\n        }\n        return (\n            <div className=\"history--section container\">\n                <h2>One year ago - {this.state.oneyearprice.date}</h2>\n                <div className=\"history--section__box\">\n                    <div className=\"history--section__box__inner\">\n                        <div className=\"columns\">\n                            <div className=\"column\">\n                                <p>1 BTC = {this.state.oneyearprice.btc} €</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 ICX = {this.state.oneyearprice.icx} €</p>\n                            </div>\n                            <div className=\"column\">\n                                <p>1 NANO = {valueOfNano} €</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default History;\n","// Import React and Component\nimport React, { Component } from 'react';\n// Import CSS from App.css\nimport './App.css';\n// Import the Today component to be used below\nimport Today from './Today/Today'\n// Import the History component to be used below\nimport History from './History/History'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n        <header className=\"container\">\n          <nav className=\"navbar\"></nav>\n            <div className=\"navbar-brand\">\n              <span className=\"navbar-item\">HistoriCoins</span>\n            </div>\n            <div className=\"navbar-end\">\n            <a className=\"navbar-item\" href=\"https://github.com/CyrilNb/Historicoins\" target=\"_blank\" rel=\"noopener noreferrer\">Fork me on Github!</a>\n            </div>\n          </header>\n        </div>\n        <section className=\"results--section\">\n          <div className=\"container\">\n            <h1>HistoriCoins is a realtime price information about <br></br>BTC, ICX and NANO.</h1>\n          </div>\n          <div className=\"results--section__inner\">\n            <Today />\n            <History />\n          </div>\n        </section>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}